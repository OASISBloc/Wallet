<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<script type="text/javascript" src="/js/jquery-3.3.1.min.js"></script>
	<script src="/js/scatterjs-core.min.js"></script>
	<script src="/js/scatterjs-plugin-eosjs.min.js"></script>
	<script src="/js/scatterjs-plugin-eosjs2.min.js"></script>
	<script src="/js/scatterjs-plugin-web3.min.js"></script>
	<script src="/js/scatterjs-plugin-tron.min.js"></script>
	<script src="/js/scatterjs-plugin-lynx.min.js"></script>
	<script src="/js/eos.min.js"></script>
	<title>TEST</title>
</head>
<body>
	<%=title%>
	<br>
	<br>
	<button type="button" id="signOut" style="display: none" onclick="signOut()">signOut</button>

	<br>
    <br>
	<a href="/">menu</a>
	
    <script>
        
		ScatterJS.plugins( new ScatterEOS() );

		const network = {
			blockchain:'<%=config.blockchain %>',
			protocol:'<%=config.protocol %>',
			host:'<%=config.host %>',
			port:<%=config.port %>,
			chainId:'<%=config.chainId %>'
		};

		let scatter;

		// First we need to connect to the user's Scatter.
		ScatterJS.scatter.connect('My-App').then(connected => {

			// If the user does not have Scatter or it is Locked or Closed this will return false;
			if(!connected) {
				scatter = ScatterJS.scatter;
				
				// chrome extension 또는 Desktop의 Scatter 실행 가능 확인!!!!!!!!!!!!!!!!!!

				return false;
			}
			

			scatter = ScatterJS.scatter;

			// Now we need to get an identity from the user.
			// We're also going to require an account that is connected to the network we're using.
			const requiredFields = { accounts:[network] };
			scatter.getIdentity(requiredFields).then(() => {

				$("#signOut").show();

				// Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting
				// the user for their account name beforehand. They could still give you a different account.
				const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');

				console.log("account Info :: " + JSON.stringify(account));
				console.log("newtwork Info :: " + JSON.stringify(network));

				// You can pass in any additional options you want into the eosjs reference.
				const eosOptions = { expireInSeconds:60 };

				// Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.

				const scatterEos = scatter.eos(network, Eos, eosOptions);
				
				// console.log("scatter scatterEos Info :: " + JSON.stringify(scatterEos));

				// ----------------------------
				// Now that we have an identity,
				// an EOSIO account, and a reference
				// to an eosjs object we can send a transaction.
				// ----------------------------

				// Never assume the account's permission/authority. Always take it from the returned account.
				const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };

				console.log("scatter transactionOptions Info :: " + JSON.stringify(transactionOptions));
				
				scatterEos.transaction({
					actions: [
								{
									account: "osbtoken", //컨트랙트 생성자
									name: "transfer",
									authorization: [
										{
											actor: "hiya",
											permission: "active"
										}
									],
									data: { //전송 데이터 설정
										from : "hiya", //발신자 계정명
										to : "alice", //수신자 계정명
										quantity : "10.00 OSB", //보낼 토큰명과 수량
										memo : "memo"
									}
								}
							]
				}).catch(error => {
					console.error(error);
				});

				// eos.transfer(account.name, 'alice', '1.00 OSB', 'memo', transactionOptions).then(trx => {
				// 	// That's it!
				// 	console.log(`Transaction ID: ${trx.transaction_id}`);
				// }).catch(error => {
				// 	console.error(error);
				// });

			}).catch(error => {
				// The user rejected this request, or doesn't have the appropriate requirements.
				console.error(error);
			});
		});

		function signOut() {
			// 될까????
			scatter.forgetIdentity();
			alert("안되네..");
		}
    </script>
</body>
</html>